# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-06-18 13:24
from __future__ import unicode_literals

import application
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Climat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField()),
                ('humidite', models.FloatField()),
                ('vent', models.FloatField()),
                ('radiation', models.FloatField()),
                ('pression', models.FloatField()),
                ('humidite_sol', models.FloatField(blank=True, default=None, null=True)),
                ('date', models.DateField(auto_now_add=True)),
                ('time', models.TimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'climat',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ClimatJournaliere',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature_min', models.FloatField()),
                ('temperature_moy', models.FloatField()),
                ('temperature_max', models.FloatField()),
                ('humidite_min', models.FloatField()),
                ('humidite_moy', models.FloatField()),
                ('humidite_max', models.FloatField()),
                ('humidite_sol_min', models.FloatField(blank=True, null=True)),
                ('humidite_sol_moy', models.FloatField(blank=True, null=True)),
                ('humidite_sol_max', models.FloatField(blank=True, null=True)),
                ('vent_min', models.FloatField()),
                ('vent_moy', models.FloatField()),
                ('vent_max', models.FloatField()),
                ('radiation_min', models.FloatField()),
                ('radiation_moy', models.FloatField()),
                ('radiation_max', models.FloatField()),
                ('pression_min', models.FloatField()),
                ('pression_moy', models.FloatField()),
                ('pression_max', models.FloatField()),
                ('date', models.DateField()),
            ],
            options={
                'db_table': 'journal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Noeud',
            fields=[
                ('identifiant_arduino', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('position', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('altitude', models.FloatField()),
                ('temperature', models.BooleanField()),
                ('humidite', models.BooleanField()),
                ('vent', models.BooleanField()),
                ('radiation', models.BooleanField()),
                ('humidite_sol', models.BooleanField()),
            ],
            options={
                'db_table': 'noeud',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Plante',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=20)),
                ('initial', models.IntegerField()),
                ('initial_Kc', models.FloatField()),
                ('developpement', models.IntegerField()),
                ('developpement_Kc', models.FloatField()),
                ('mi_saison', models.IntegerField()),
                ('mi_saison_Kc', models.FloatField()),
                ('recolte', models.IntegerField()),
                ('recolte_Kc', models.FloatField()),
                ('par', models.CharField(choices=[(b'J', b'Jour'), (b'S', b'Semaine'), (b'M', b'Mois')], max_length=1)),
            ],
            options={
                'db_table': 'plante',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Polygone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('polygone', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
            ],
            options={
                'db_table': 'polygone',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Projet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('type_irrigation', models.CharField(choices=[(b'A', b'Irrigation par aspersion'), (b'G', b"Techniques d'irrigation gravitaire"), (b'M', b'Irrigation localisee et micro-irrigation par le systeme du goutte-a-goutte')], max_length=1)),
                ('type', models.CharField(choices=[(b'O', b'OpenWeather'), (b'N', b'Parcelle'), (b'P', b'Plante')], max_length=1)),
                ('plante', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='application.Plante')),
                ('polygone', models.ManyToManyField(to='application.Polygone')),
            ],
            options={
                'db_table': 'projet',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=20)),
                ('sable', models.FloatField()),
                ('argile', models.FloatField()),
                ('limon', models.FloatField()),
            ],
            options={
                'db_table': 'sol',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=20)),
                ('prenom', models.CharField(max_length=20)),
                ('pseudo', models.CharField(max_length=20, unique=True)),
                ('mot_de_passe', models.CharField(max_length=33)),
                ('photo', models.ImageField(upload_to=application.set_utilisateur_nom)),
                ('telephone', models.IntegerField()),
                ('email', models.CharField(max_length=40)),
                ('adresse', models.CharField(max_length=50)),
                ('position', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('plante', models.ManyToManyField(to='application.Plante')),
            ],
            options={
                'db_table': 'utilisateur',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ClimatNoeud',
            fields=[
                ('climat_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='application.Climat')),
            ],
            options={
                'db_table': 'climat_noeud',
                'managed': True,
            },
            bases=('application.climat',),
        ),
        migrations.CreateModel(
            name='ClimatOpenWeather',
            fields=[
                ('climat_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='application.Climat')),
            ],
            options={
                'db_table': 'climat_openWeather',
                'managed': True,
            },
            bases=('application.climat',),
        ),
        migrations.AddField(
            model_name='sol',
            name='utilisateur',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.Utilisateur'),
        ),
        migrations.AddField(
            model_name='projet',
            name='sol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='application.Sol'),
        ),
        migrations.AddField(
            model_name='projet',
            name='utilisateur',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.Utilisateur'),
        ),
        migrations.AddField(
            model_name='noeud',
            name='projet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.Projet'),
        ),
        migrations.AddField(
            model_name='climatjournaliere',
            name='projet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.Projet'),
        ),
        migrations.AddField(
            model_name='climatopenweather',
            name='projet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.Projet'),
        ),
        migrations.AddField(
            model_name='climatnoeud',
            name='noeud',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.Noeud'),
        ),
    ]
